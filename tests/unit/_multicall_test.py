import pytest
from unittest.mock import Mock, create_autospec, MagicMock
from web3 import Web3
from src.lib.data_entities.networks import get_l2_network
from src.lib.utils.multi_call import MultiCaller

# Assuming get_l2_network and MultiCaller are adapted to Python


def create_provider_mock(network_choice_override=None):
    l2_network = get_l2_network(network_choice_override or 42161)

    # Create a Mock for the Web3 instance
    l2_provider_mock = Mock(spec=Web3)

    # Explicitly create a Mock for the eth attribute
    eth_mock = MagicMock()
    l2_provider_mock.eth = eth_mock

    latest_block = l2_network.nitro_genesis_block + 1000

    # Set return values and side effects on the eth mock
    eth_mock.getBlockNumber.return_value = latest_block
    eth_mock.get_block_number.return_value = latest_block
    eth_mock.get_logs.return_value = []
    eth_mock.call.side_effect = [maker_side_effect, uniswap_side_effect]

    l2_provider_mock.net = Mock()
    l2_provider_mock.eth.chainId = l2_network.chain_id
    l2_provider_mock.eth.chain_id = l2_network.chain_id
    l2_provider_mock.net.version = l2_network.chain_id

    return {
        "l2_provider_mock": l2_provider_mock,
        "l2_provider": l2_provider_mock,
        "l2_network": l2_network,
        "latest_block": latest_block,
    }


def maker_side_effect(*args, **kwargs):
    # Define the expected 'data' and 'to' values for the Maker call
    expected_data = "0xbce38bd7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000406fdde03000000000000000000000000000000000000000000000000000000000000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000495d89b4100000000000000000000000000000000000000000000000000000000"  # Replace with actual data
    expected_to = Web3.to_checksum_address("0x108B25170319f38DbED14cA9716C54E5D1FF4623")
    # Check if the call arguments match the expected values for the Maker call
    if args[0]["data"] == expected_data and args[0]["to"] == expected_to:
        # Return the mock response similar to the TypeScript version
        return "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000204d616b65720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000204d4b520000000000000000000000000000000000000000000000000000000000"  # Replace with the actual return value

    return None


def uniswap_side_effect(*args, **kwargs):
    # Define the expected 'data' and 'to' values for the Maker call
    expected_data = "0xbce38bd7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f9840000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000406fdde03000000000000000000000000000000000000000000000000000000000000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f9840000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000495d89b4100000000000000000000000000000000000000000000000000000000"  # Replace with actual data
    expected_to = Web3.to_checksum_address("0x108B25170319f38DbED14cA9716C54E5D1FF4623")

    # Check if the call arguments match the expected values for the Maker call
    if args[0]["data"] == expected_data and args[0]["to"] == expected_to:
        # Return the mock response similar to the TypeScript version
        return "0xe69737761700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003554e490000000000000000000000000000000000000000000000000000000000"  # Replace with the actual return value
    return None


@pytest.mark.asyncio
async def test_returns_parsed_data_from_bytes32():
    provider_info = create_provider_mock(421613)
    l2_provider = provider_info["l2_provider"]
    # 421613 is the chain ID for Arbitrum Rollup Goerli Testnet
    # multicaller = await MultiCaller.from_provider(l2_provider)  # Adapt this line if necessary
    multicaller = MultiCaller("https://goerli-rollup.arbitrum.io/rpc", "0x108B25170319f38DbED14cA9716C54E5D1FF4623")
    data = await multicaller.get_token_data(
        ["0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2"], {"symbol": True, "name": True}
    )
    assert data[0]["name"] == "Maker", "Failed to get token name from bytes32"
    assert data[0]["symbol"] == "MKR", "Failed to get token symbol from bytes32"


# @pytest.mark.asyncio
# async def test_returns_parsed_data_from_byte_string():
#     provider_info = create_provider_mock(421613)
#     l2_provider = provider_info['l2_provider']
#     multicaller = await MultiCaller.from_provider(l2_provider)  # Adapt this line if necessary
#     data = await multicaller.get_token_data(
#         ['0x1f9840a85d5af5bf1d1762f925bdaddc4201f984'],
#         {'symbol': True, 'name': True}
#     )

#     assert data[0]['name'] == 'Uniswap', 'Failed to get token name from byte string'
#     assert data[0]['symbol'] == 'UNI', 'Failed to get token symbol from byte string'
